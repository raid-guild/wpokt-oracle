// Code generated by mockery v2.33.0. DO NOT EDIT.

package client

import (
	mock "github.com/stretchr/testify/mock"

	rpc "github.com/pokt-network/pocket-core/app/cmd/rpc"
)

// MockPocketClient is an autogenerated mock type for the PocketClient type
type MockPocketClient struct {
	mock.Mock
}

type MockPocketClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPocketClient) EXPECT() *MockPocketClient_Expecter {
	return &MockPocketClient_Expecter{mock: &_m.Mock}
}

// GetAccountTxsByHeight provides a mock function with given fields: address, height
func (_m *MockPocketClient) GetAccountTxsByHeight(address string, height int64) ([]*TxResponse, error) {
	ret := _m.Called(address, height)

	var r0 []*TxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64) ([]*TxResponse, error)); ok {
		return rf(address, height)
	}
	if rf, ok := ret.Get(0).(func(string, int64) []*TxResponse); ok {
		r0 = rf(address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*TxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPocketClient_GetAccountTxsByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountTxsByHeight'
type MockPocketClient_GetAccountTxsByHeight_Call struct {
	*mock.Call
}

// GetAccountTxsByHeight is a helper method to define mock.On call
//   - address string
//   - height int64
func (_e *MockPocketClient_Expecter) GetAccountTxsByHeight(address interface{}, height interface{}) *MockPocketClient_GetAccountTxsByHeight_Call {
	return &MockPocketClient_GetAccountTxsByHeight_Call{Call: _e.mock.On("GetAccountTxsByHeight", address, height)}
}

func (_c *MockPocketClient_GetAccountTxsByHeight_Call) Run(run func(address string, height int64)) *MockPocketClient_GetAccountTxsByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockPocketClient_GetAccountTxsByHeight_Call) Return(_a0 []*TxResponse, _a1 error) *MockPocketClient_GetAccountTxsByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPocketClient_GetAccountTxsByHeight_Call) RunAndReturn(run func(string, int64) ([]*TxResponse, error)) *MockPocketClient_GetAccountTxsByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlock provides a mock function with given fields:
func (_m *MockPocketClient) GetBlock() (*BlockResponse, error) {
	ret := _m.Called()

	var r0 *BlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*BlockResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *BlockResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPocketClient_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type MockPocketClient_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
func (_e *MockPocketClient_Expecter) GetBlock() *MockPocketClient_GetBlock_Call {
	return &MockPocketClient_GetBlock_Call{Call: _e.mock.On("GetBlock")}
}

func (_c *MockPocketClient_GetBlock_Call) Run(run func()) *MockPocketClient_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPocketClient_GetBlock_Call) Return(_a0 *BlockResponse, _a1 error) *MockPocketClient_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPocketClient_GetBlock_Call) RunAndReturn(run func() (*BlockResponse, error)) *MockPocketClient_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeight provides a mock function with given fields:
func (_m *MockPocketClient) GetHeight() (*HeightResponse, error) {
	ret := _m.Called()

	var r0 *HeightResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*HeightResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *HeightResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HeightResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPocketClient_GetHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeight'
type MockPocketClient_GetHeight_Call struct {
	*mock.Call
}

// GetHeight is a helper method to define mock.On call
func (_e *MockPocketClient_Expecter) GetHeight() *MockPocketClient_GetHeight_Call {
	return &MockPocketClient_GetHeight_Call{Call: _e.mock.On("GetHeight")}
}

func (_c *MockPocketClient_GetHeight_Call) Run(run func()) *MockPocketClient_GetHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPocketClient_GetHeight_Call) Return(_a0 *HeightResponse, _a1 error) *MockPocketClient_GetHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPocketClient_GetHeight_Call) RunAndReturn(run func() (*HeightResponse, error)) *MockPocketClient_GetHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetTx provides a mock function with given fields: hash
func (_m *MockPocketClient) GetTx(hash string) (*TxResponse, error) {
	ret := _m.Called(hash)

	var r0 *TxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*TxResponse, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) *TxResponse); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPocketClient_GetTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTx'
type MockPocketClient_GetTx_Call struct {
	*mock.Call
}

// GetTx is a helper method to define mock.On call
//   - hash string
func (_e *MockPocketClient_Expecter) GetTx(hash interface{}) *MockPocketClient_GetTx_Call {
	return &MockPocketClient_GetTx_Call{Call: _e.mock.On("GetTx", hash)}
}

func (_c *MockPocketClient_GetTx_Call) Run(run func(hash string)) *MockPocketClient_GetTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPocketClient_GetTx_Call) Return(_a0 *TxResponse, _a1 error) *MockPocketClient_GetTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPocketClient_GetTx_Call) RunAndReturn(run func(string) (*TxResponse, error)) *MockPocketClient_GetTx_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitRawTx provides a mock function with given fields: params
func (_m *MockPocketClient) SubmitRawTx(params rpc.SendRawTxParams) (*SubmitRawTxResponse, error) {
	ret := _m.Called(params)

	var r0 *SubmitRawTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(rpc.SendRawTxParams) (*SubmitRawTxResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(rpc.SendRawTxParams) *SubmitRawTxResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SubmitRawTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(rpc.SendRawTxParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPocketClient_SubmitRawTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitRawTx'
type MockPocketClient_SubmitRawTx_Call struct {
	*mock.Call
}

// SubmitRawTx is a helper method to define mock.On call
//   - params rpc.SendRawTxParams
func (_e *MockPocketClient_Expecter) SubmitRawTx(params interface{}) *MockPocketClient_SubmitRawTx_Call {
	return &MockPocketClient_SubmitRawTx_Call{Call: _e.mock.On("SubmitRawTx", params)}
}

func (_c *MockPocketClient_SubmitRawTx_Call) Run(run func(params rpc.SendRawTxParams)) *MockPocketClient_SubmitRawTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rpc.SendRawTxParams))
	})
	return _c
}

func (_c *MockPocketClient_SubmitRawTx_Call) Return(_a0 *SubmitRawTxResponse, _a1 error) *MockPocketClient_SubmitRawTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPocketClient_SubmitRawTx_Call) RunAndReturn(run func(rpc.SendRawTxParams) (*SubmitRawTxResponse, error)) *MockPocketClient_SubmitRawTx_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateNetwork provides a mock function with given fields:
func (_m *MockPocketClient) ValidateNetwork() {
	_m.Called()
}

// MockPocketClient_ValidateNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateNetwork'
type MockPocketClient_ValidateNetwork_Call struct {
	*mock.Call
}

// ValidateNetwork is a helper method to define mock.On call
func (_e *MockPocketClient_Expecter) ValidateNetwork() *MockPocketClient_ValidateNetwork_Call {
	return &MockPocketClient_ValidateNetwork_Call{Call: _e.mock.On("ValidateNetwork")}
}

func (_c *MockPocketClient_ValidateNetwork_Call) Run(run func()) *MockPocketClient_ValidateNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPocketClient_ValidateNetwork_Call) Return() *MockPocketClient_ValidateNetwork_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPocketClient_ValidateNetwork_Call) RunAndReturn(run func()) *MockPocketClient_ValidateNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPocketClient creates a new instance of MockPocketClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPocketClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPocketClient {
	mock := &MockPocketClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
