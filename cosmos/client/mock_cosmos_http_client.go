// Code generated by mockery v2.43.2. DO NOT EDIT.

package client

import (
	bytes "github.com/cometbft/cometbft/libs/bytes"

	context "context"

	coretypes "github.com/cometbft/cometbft/rpc/core/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cometbft/cometbft/types"
)

// MockCosmosHTTPClient is an autogenerated mock type for the CosmosHTTPClient type
type MockCosmosHTTPClient struct {
	mock.Mock
}

type MockCosmosHTTPClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCosmosHTTPClient) EXPECT() *MockCosmosHTTPClient_Expecter {
	return &MockCosmosHTTPClient_Expecter{mock: &_m.Mock}
}

// ABCIQuery provides a mock function with given fields: ctx, path, data
func (_m *MockCosmosHTTPClient) ABCIQuery(ctx context.Context, path string, data bytes.HexBytes) (*coretypes.ResultABCIQuery, error) {
	ret := _m.Called(ctx, path, data)

	if len(ret) == 0 {
		panic("no return value specified for ABCIQuery")
	}

	var r0 *coretypes.ResultABCIQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bytes.HexBytes) (*coretypes.ResultABCIQuery, error)); ok {
		return rf(ctx, path, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bytes.HexBytes) *coretypes.ResultABCIQuery); ok {
		r0 = rf(ctx, path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultABCIQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bytes.HexBytes) error); ok {
		r1 = rf(ctx, path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCosmosHTTPClient_ABCIQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABCIQuery'
type MockCosmosHTTPClient_ABCIQuery_Call struct {
	*mock.Call
}

// ABCIQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - data bytes.HexBytes
func (_e *MockCosmosHTTPClient_Expecter) ABCIQuery(ctx interface{}, path interface{}, data interface{}) *MockCosmosHTTPClient_ABCIQuery_Call {
	return &MockCosmosHTTPClient_ABCIQuery_Call{Call: _e.mock.On("ABCIQuery", ctx, path, data)}
}

func (_c *MockCosmosHTTPClient_ABCIQuery_Call) Run(run func(ctx context.Context, path string, data bytes.HexBytes)) *MockCosmosHTTPClient_ABCIQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bytes.HexBytes))
	})
	return _c
}

func (_c *MockCosmosHTTPClient_ABCIQuery_Call) Return(_a0 *coretypes.ResultABCIQuery, _a1 error) *MockCosmosHTTPClient_ABCIQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCosmosHTTPClient_ABCIQuery_Call) RunAndReturn(run func(context.Context, string, bytes.HexBytes) (*coretypes.ResultABCIQuery, error)) *MockCosmosHTTPClient_ABCIQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Block provides a mock function with given fields: ctx, height
func (_m *MockCosmosHTTPClient) Block(ctx context.Context, height *int64) (*coretypes.ResultBlock, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for Block")
	}

	var r0 *coretypes.ResultBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64) (*coretypes.ResultBlock, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int64) *coretypes.ResultBlock); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCosmosHTTPClient_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type MockCosmosHTTPClient_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
//   - ctx context.Context
//   - height *int64
func (_e *MockCosmosHTTPClient_Expecter) Block(ctx interface{}, height interface{}) *MockCosmosHTTPClient_Block_Call {
	return &MockCosmosHTTPClient_Block_Call{Call: _e.mock.On("Block", ctx, height)}
}

func (_c *MockCosmosHTTPClient_Block_Call) Run(run func(ctx context.Context, height *int64)) *MockCosmosHTTPClient_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*int64))
	})
	return _c
}

func (_c *MockCosmosHTTPClient_Block_Call) Return(_a0 *coretypes.ResultBlock, _a1 error) *MockCosmosHTTPClient_Block_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCosmosHTTPClient_Block_Call) RunAndReturn(run func(context.Context, *int64) (*coretypes.ResultBlock, error)) *MockCosmosHTTPClient_Block_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastTxSync provides a mock function with given fields: ctx, tx
func (_m *MockCosmosHTTPClient) BroadcastTxSync(ctx context.Context, tx types.Tx) (*coretypes.ResultBroadcastTx, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastTxSync")
	}

	var r0 *coretypes.ResultBroadcastTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Tx) (*coretypes.ResultBroadcastTx, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Tx) *coretypes.ResultBroadcastTx); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBroadcastTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Tx) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCosmosHTTPClient_BroadcastTxSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastTxSync'
type MockCosmosHTTPClient_BroadcastTxSync_Call struct {
	*mock.Call
}

// BroadcastTxSync is a helper method to define mock.On call
//   - ctx context.Context
//   - tx types.Tx
func (_e *MockCosmosHTTPClient_Expecter) BroadcastTxSync(ctx interface{}, tx interface{}) *MockCosmosHTTPClient_BroadcastTxSync_Call {
	return &MockCosmosHTTPClient_BroadcastTxSync_Call{Call: _e.mock.On("BroadcastTxSync", ctx, tx)}
}

func (_c *MockCosmosHTTPClient_BroadcastTxSync_Call) Run(run func(ctx context.Context, tx types.Tx)) *MockCosmosHTTPClient_BroadcastTxSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Tx))
	})
	return _c
}

func (_c *MockCosmosHTTPClient_BroadcastTxSync_Call) Return(_a0 *coretypes.ResultBroadcastTx, _a1 error) *MockCosmosHTTPClient_BroadcastTxSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCosmosHTTPClient_BroadcastTxSync_Call) RunAndReturn(run func(context.Context, types.Tx) (*coretypes.ResultBroadcastTx, error)) *MockCosmosHTTPClient_BroadcastTxSync_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx
func (_m *MockCosmosHTTPClient) Status(ctx context.Context) (*coretypes.ResultStatus, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *coretypes.ResultStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*coretypes.ResultStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *coretypes.ResultStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCosmosHTTPClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockCosmosHTTPClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCosmosHTTPClient_Expecter) Status(ctx interface{}) *MockCosmosHTTPClient_Status_Call {
	return &MockCosmosHTTPClient_Status_Call{Call: _e.mock.On("Status", ctx)}
}

func (_c *MockCosmosHTTPClient_Status_Call) Run(run func(ctx context.Context)) *MockCosmosHTTPClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCosmosHTTPClient_Status_Call) Return(_a0 *coretypes.ResultStatus, _a1 error) *MockCosmosHTTPClient_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCosmosHTTPClient_Status_Call) RunAndReturn(run func(context.Context) (*coretypes.ResultStatus, error)) *MockCosmosHTTPClient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Tx provides a mock function with given fields: ctx, hash, prove
func (_m *MockCosmosHTTPClient) Tx(ctx context.Context, hash []byte, prove bool) (*coretypes.ResultTx, error) {
	ret := _m.Called(ctx, hash, prove)

	if len(ret) == 0 {
		panic("no return value specified for Tx")
	}

	var r0 *coretypes.ResultTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, bool) (*coretypes.ResultTx, error)); ok {
		return rf(ctx, hash, prove)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, bool) *coretypes.ResultTx); ok {
		r0 = rf(ctx, hash, prove)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, bool) error); ok {
		r1 = rf(ctx, hash, prove)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCosmosHTTPClient_Tx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tx'
type MockCosmosHTTPClient_Tx_Call struct {
	*mock.Call
}

// Tx is a helper method to define mock.On call
//   - ctx context.Context
//   - hash []byte
//   - prove bool
func (_e *MockCosmosHTTPClient_Expecter) Tx(ctx interface{}, hash interface{}, prove interface{}) *MockCosmosHTTPClient_Tx_Call {
	return &MockCosmosHTTPClient_Tx_Call{Call: _e.mock.On("Tx", ctx, hash, prove)}
}

func (_c *MockCosmosHTTPClient_Tx_Call) Run(run func(ctx context.Context, hash []byte, prove bool)) *MockCosmosHTTPClient_Tx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(bool))
	})
	return _c
}

func (_c *MockCosmosHTTPClient_Tx_Call) Return(_a0 *coretypes.ResultTx, _a1 error) *MockCosmosHTTPClient_Tx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCosmosHTTPClient_Tx_Call) RunAndReturn(run func(context.Context, []byte, bool) (*coretypes.ResultTx, error)) *MockCosmosHTTPClient_Tx_Call {
	_c.Call.Return(run)
	return _c
}

// TxSearch provides a mock function with given fields: ctx, query, prove, page, limit, orderBy
func (_m *MockCosmosHTTPClient) TxSearch(ctx context.Context, query string, prove bool, page *int, limit *int, orderBy string) (*coretypes.ResultTxSearch, error) {
	ret := _m.Called(ctx, query, prove, page, limit, orderBy)

	if len(ret) == 0 {
		panic("no return value specified for TxSearch")
	}

	var r0 *coretypes.ResultTxSearch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *int, *int, string) (*coretypes.ResultTxSearch, error)); ok {
		return rf(ctx, query, prove, page, limit, orderBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *int, *int, string) *coretypes.ResultTxSearch); ok {
		r0 = rf(ctx, query, prove, page, limit, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultTxSearch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, *int, *int, string) error); ok {
		r1 = rf(ctx, query, prove, page, limit, orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCosmosHTTPClient_TxSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxSearch'
type MockCosmosHTTPClient_TxSearch_Call struct {
	*mock.Call
}

// TxSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - prove bool
//   - page *int
//   - limit *int
//   - orderBy string
func (_e *MockCosmosHTTPClient_Expecter) TxSearch(ctx interface{}, query interface{}, prove interface{}, page interface{}, limit interface{}, orderBy interface{}) *MockCosmosHTTPClient_TxSearch_Call {
	return &MockCosmosHTTPClient_TxSearch_Call{Call: _e.mock.On("TxSearch", ctx, query, prove, page, limit, orderBy)}
}

func (_c *MockCosmosHTTPClient_TxSearch_Call) Run(run func(ctx context.Context, query string, prove bool, page *int, limit *int, orderBy string)) *MockCosmosHTTPClient_TxSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(*int), args[4].(*int), args[5].(string))
	})
	return _c
}

func (_c *MockCosmosHTTPClient_TxSearch_Call) Return(_a0 *coretypes.ResultTxSearch, _a1 error) *MockCosmosHTTPClient_TxSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCosmosHTTPClient_TxSearch_Call) RunAndReturn(run func(context.Context, string, bool, *int, *int, string) (*coretypes.ResultTxSearch, error)) *MockCosmosHTTPClient_TxSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCosmosHTTPClient creates a new instance of MockCosmosHTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCosmosHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCosmosHTTPClient {
	mock := &MockCosmosHTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
