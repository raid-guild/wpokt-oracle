// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	autogen "github.com/dan13ram/wpokt-oracle/ethereum/autogen"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	client "github.com/dan13ram/wpokt-oracle/ethereum/client"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockMailboxContract is an autogenerated mock type for the MailboxContract type
type MockMailboxContract struct {
	mock.Mock
}

type MockMailboxContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailboxContract) EXPECT() *MockMailboxContract_Expecter {
	return &MockMailboxContract_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *MockMailboxContract) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// MockMailboxContract_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockMailboxContract_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockMailboxContract_Expecter) Address() *MockMailboxContract_Address_Call {
	return &MockMailboxContract_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockMailboxContract_Address_Call) Run(run func()) *MockMailboxContract_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMailboxContract_Address_Call) Return(_a0 common.Address) *MockMailboxContract_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailboxContract_Address_Call) RunAndReturn(run func() common.Address) *MockMailboxContract_Address_Call {
	_c.Call.Return(run)
	return _c
}

// FilterDispatch provides a mock function with given fields: opts, sender, destination, recipient
func (_m *MockMailboxContract) FilterDispatch(opts *bind.FilterOpts, sender []common.Address, destination []uint32, recipient [][32]byte) (client.MailboxDispatchIterator, error) {
	ret := _m.Called(opts, sender, destination, recipient)

	if len(ret) == 0 {
		panic("no return value specified for FilterDispatch")
	}

	var r0 client.MailboxDispatchIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []uint32, [][32]byte) (client.MailboxDispatchIterator, error)); ok {
		return rf(opts, sender, destination, recipient)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []uint32, [][32]byte) client.MailboxDispatchIterator); ok {
		r0 = rf(opts, sender, destination, recipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.MailboxDispatchIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []uint32, [][32]byte) error); ok {
		r1 = rf(opts, sender, destination, recipient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMailboxContract_FilterDispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterDispatch'
type MockMailboxContract_FilterDispatch_Call struct {
	*mock.Call
}

// FilterDispatch is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - sender []common.Address
//   - destination []uint32
//   - recipient [][32]byte
func (_e *MockMailboxContract_Expecter) FilterDispatch(opts interface{}, sender interface{}, destination interface{}, recipient interface{}) *MockMailboxContract_FilterDispatch_Call {
	return &MockMailboxContract_FilterDispatch_Call{Call: _e.mock.On("FilterDispatch", opts, sender, destination, recipient)}
}

func (_c *MockMailboxContract_FilterDispatch_Call) Run(run func(opts *bind.FilterOpts, sender []common.Address, destination []uint32, recipient [][32]byte)) *MockMailboxContract_FilterDispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([]uint32), args[3].([][32]byte))
	})
	return _c
}

func (_c *MockMailboxContract_FilterDispatch_Call) Return(_a0 client.MailboxDispatchIterator, _a1 error) *MockMailboxContract_FilterDispatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMailboxContract_FilterDispatch_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, []uint32, [][32]byte) (client.MailboxDispatchIterator, error)) *MockMailboxContract_FilterDispatch_Call {
	_c.Call.Return(run)
	return _c
}

// ParseDispatch provides a mock function with given fields: log
func (_m *MockMailboxContract) ParseDispatch(log types.Log) (*autogen.MailboxDispatch, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseDispatch")
	}

	var r0 *autogen.MailboxDispatch
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*autogen.MailboxDispatch, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *autogen.MailboxDispatch); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autogen.MailboxDispatch)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMailboxContract_ParseDispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseDispatch'
type MockMailboxContract_ParseDispatch_Call struct {
	*mock.Call
}

// ParseDispatch is a helper method to define mock.On call
//   - log types.Log
func (_e *MockMailboxContract_Expecter) ParseDispatch(log interface{}) *MockMailboxContract_ParseDispatch_Call {
	return &MockMailboxContract_ParseDispatch_Call{Call: _e.mock.On("ParseDispatch", log)}
}

func (_c *MockMailboxContract_ParseDispatch_Call) Run(run func(log types.Log)) *MockMailboxContract_ParseDispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockMailboxContract_ParseDispatch_Call) Return(_a0 *autogen.MailboxDispatch, _a1 error) *MockMailboxContract_ParseDispatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMailboxContract_ParseDispatch_Call) RunAndReturn(run func(types.Log) (*autogen.MailboxDispatch, error)) *MockMailboxContract_ParseDispatch_Call {
	_c.Call.Return(run)
	return _c
}

// ParseDispatchId provides a mock function with given fields: log
func (_m *MockMailboxContract) ParseDispatchId(log types.Log) (*autogen.MailboxDispatchId, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseDispatchId")
	}

	var r0 *autogen.MailboxDispatchId
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*autogen.MailboxDispatchId, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *autogen.MailboxDispatchId); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autogen.MailboxDispatchId)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMailboxContract_ParseDispatchId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseDispatchId'
type MockMailboxContract_ParseDispatchId_Call struct {
	*mock.Call
}

// ParseDispatchId is a helper method to define mock.On call
//   - log types.Log
func (_e *MockMailboxContract_Expecter) ParseDispatchId(log interface{}) *MockMailboxContract_ParseDispatchId_Call {
	return &MockMailboxContract_ParseDispatchId_Call{Call: _e.mock.On("ParseDispatchId", log)}
}

func (_c *MockMailboxContract_ParseDispatchId_Call) Run(run func(log types.Log)) *MockMailboxContract_ParseDispatchId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockMailboxContract_ParseDispatchId_Call) Return(_a0 *autogen.MailboxDispatchId, _a1 error) *MockMailboxContract_ParseDispatchId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMailboxContract_ParseDispatchId_Call) RunAndReturn(run func(types.Log) (*autogen.MailboxDispatchId, error)) *MockMailboxContract_ParseDispatchId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailboxContract creates a new instance of MockMailboxContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailboxContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailboxContract {
	mock := &MockMailboxContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
