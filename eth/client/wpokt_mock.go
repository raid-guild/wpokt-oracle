// Code generated by mockery v2.33.0. DO NOT EDIT.

package client

import (
	big "math/big"

	autogen "github.com/dan13ram/wpokt-oracle/eth/autogen"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockWrappedPocketContract is an autogenerated mock type for the WrappedPocketContract type
type MockWrappedPocketContract struct {
	mock.Mock
}

type MockWrappedPocketContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWrappedPocketContract) EXPECT() *MockWrappedPocketContract_Expecter {
	return &MockWrappedPocketContract_Expecter{mock: &_m.Mock}
}

// FilterBurnAndBridge provides a mock function with given fields: opts, amount, poktAddress, from
func (_m *MockWrappedPocketContract) FilterBurnAndBridge(opts *bind.FilterOpts, amount []*big.Int, poktAddress []common.Address, from []common.Address) (WrappedPocketBurnAndBridgeIterator, error) {
	ret := _m.Called(opts, amount, poktAddress, from)

	var r0 WrappedPocketBurnAndBridgeIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) (WrappedPocketBurnAndBridgeIterator, error)); ok {
		return rf(opts, amount, poktAddress, from)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) WrappedPocketBurnAndBridgeIterator); ok {
		r0 = rf(opts, amount, poktAddress, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(WrappedPocketBurnAndBridgeIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, amount, poktAddress, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWrappedPocketContract_FilterBurnAndBridge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterBurnAndBridge'
type MockWrappedPocketContract_FilterBurnAndBridge_Call struct {
	*mock.Call
}

// FilterBurnAndBridge is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - amount []*big.Int
//   - poktAddress []common.Address
//   - from []common.Address
func (_e *MockWrappedPocketContract_Expecter) FilterBurnAndBridge(opts interface{}, amount interface{}, poktAddress interface{}, from interface{}) *MockWrappedPocketContract_FilterBurnAndBridge_Call {
	return &MockWrappedPocketContract_FilterBurnAndBridge_Call{Call: _e.mock.On("FilterBurnAndBridge", opts, amount, poktAddress, from)}
}

func (_c *MockWrappedPocketContract_FilterBurnAndBridge_Call) Run(run func(opts *bind.FilterOpts, amount []*big.Int, poktAddress []common.Address, from []common.Address)) *MockWrappedPocketContract_FilterBurnAndBridge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]*big.Int), args[2].([]common.Address), args[3].([]common.Address))
	})
	return _c
}

func (_c *MockWrappedPocketContract_FilterBurnAndBridge_Call) Return(_a0 WrappedPocketBurnAndBridgeIterator, _a1 error) *MockWrappedPocketContract_FilterBurnAndBridge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWrappedPocketContract_FilterBurnAndBridge_Call) RunAndReturn(run func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) (WrappedPocketBurnAndBridgeIterator, error)) *MockWrappedPocketContract_FilterBurnAndBridge_Call {
	_c.Call.Return(run)
	return _c
}

// FilterMinted provides a mock function with given fields: opts, recipient, amount, nonce
func (_m *MockWrappedPocketContract) FilterMinted(opts *bind.FilterOpts, recipient []common.Address, amount []*big.Int, nonce []*big.Int) (WrappedPocketMintedIterator, error) {
	ret := _m.Called(opts, recipient, amount, nonce)

	var r0 WrappedPocketMintedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []*big.Int, []*big.Int) (WrappedPocketMintedIterator, error)); ok {
		return rf(opts, recipient, amount, nonce)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []*big.Int, []*big.Int) WrappedPocketMintedIterator); ok {
		r0 = rf(opts, recipient, amount, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(WrappedPocketMintedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []*big.Int, []*big.Int) error); ok {
		r1 = rf(opts, recipient, amount, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWrappedPocketContract_FilterMinted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterMinted'
type MockWrappedPocketContract_FilterMinted_Call struct {
	*mock.Call
}

// FilterMinted is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - recipient []common.Address
//   - amount []*big.Int
//   - nonce []*big.Int
func (_e *MockWrappedPocketContract_Expecter) FilterMinted(opts interface{}, recipient interface{}, amount interface{}, nonce interface{}) *MockWrappedPocketContract_FilterMinted_Call {
	return &MockWrappedPocketContract_FilterMinted_Call{Call: _e.mock.On("FilterMinted", opts, recipient, amount, nonce)}
}

func (_c *MockWrappedPocketContract_FilterMinted_Call) Run(run func(opts *bind.FilterOpts, recipient []common.Address, amount []*big.Int, nonce []*big.Int)) *MockWrappedPocketContract_FilterMinted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([]*big.Int), args[3].([]*big.Int))
	})
	return _c
}

func (_c *MockWrappedPocketContract_FilterMinted_Call) Return(_a0 WrappedPocketMintedIterator, _a1 error) *MockWrappedPocketContract_FilterMinted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWrappedPocketContract_FilterMinted_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, []*big.Int, []*big.Int) (WrappedPocketMintedIterator, error)) *MockWrappedPocketContract_FilterMinted_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserNonce provides a mock function with given fields: opts, user
func (_m *MockWrappedPocketContract) GetUserNonce(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	ret := _m.Called(opts, user)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, user)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWrappedPocketContract_GetUserNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserNonce'
type MockWrappedPocketContract_GetUserNonce_Call struct {
	*mock.Call
}

// GetUserNonce is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - user common.Address
func (_e *MockWrappedPocketContract_Expecter) GetUserNonce(opts interface{}, user interface{}) *MockWrappedPocketContract_GetUserNonce_Call {
	return &MockWrappedPocketContract_GetUserNonce_Call{Call: _e.mock.On("GetUserNonce", opts, user)}
}

func (_c *MockWrappedPocketContract_GetUserNonce_Call) Run(run func(opts *bind.CallOpts, user common.Address)) *MockWrappedPocketContract_GetUserNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *MockWrappedPocketContract_GetUserNonce_Call) Return(_a0 *big.Int, _a1 error) *MockWrappedPocketContract_GetUserNonce_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWrappedPocketContract_GetUserNonce_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (*big.Int, error)) *MockWrappedPocketContract_GetUserNonce_Call {
	_c.Call.Return(run)
	return _c
}

// ParseBurnAndBridge provides a mock function with given fields: log
func (_m *MockWrappedPocketContract) ParseBurnAndBridge(log types.Log) (*autogen.WrappedPocketBurnAndBridge, error) {
	ret := _m.Called(log)

	var r0 *autogen.WrappedPocketBurnAndBridge
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*autogen.WrappedPocketBurnAndBridge, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *autogen.WrappedPocketBurnAndBridge); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autogen.WrappedPocketBurnAndBridge)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWrappedPocketContract_ParseBurnAndBridge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseBurnAndBridge'
type MockWrappedPocketContract_ParseBurnAndBridge_Call struct {
	*mock.Call
}

// ParseBurnAndBridge is a helper method to define mock.On call
//   - log types.Log
func (_e *MockWrappedPocketContract_Expecter) ParseBurnAndBridge(log interface{}) *MockWrappedPocketContract_ParseBurnAndBridge_Call {
	return &MockWrappedPocketContract_ParseBurnAndBridge_Call{Call: _e.mock.On("ParseBurnAndBridge", log)}
}

func (_c *MockWrappedPocketContract_ParseBurnAndBridge_Call) Run(run func(log types.Log)) *MockWrappedPocketContract_ParseBurnAndBridge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockWrappedPocketContract_ParseBurnAndBridge_Call) Return(_a0 *autogen.WrappedPocketBurnAndBridge, _a1 error) *MockWrappedPocketContract_ParseBurnAndBridge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWrappedPocketContract_ParseBurnAndBridge_Call) RunAndReturn(run func(types.Log) (*autogen.WrappedPocketBurnAndBridge, error)) *MockWrappedPocketContract_ParseBurnAndBridge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWrappedPocketContract creates a new instance of MockWrappedPocketContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWrappedPocketContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWrappedPocketContract {
	mock := &MockWrappedPocketContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
