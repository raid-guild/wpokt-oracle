// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	tx "github.com/cosmos/cosmos-sdk/types/tx"
)

// MockTxServiceClient is an autogenerated mock type for the ServiceClient type
type MockTxServiceClient struct {
	mock.Mock
}

type MockTxServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxServiceClient) EXPECT() *MockTxServiceClient_Expecter {
	return &MockTxServiceClient_Expecter{mock: &_m.Mock}
}

// BroadcastTx provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) BroadcastTx(ctx context.Context, in *tx.BroadcastTxRequest, opts ...grpc.CallOption) (*tx.BroadcastTxResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastTx")
	}

	var r0 *tx.BroadcastTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.BroadcastTxRequest, ...grpc.CallOption) (*tx.BroadcastTxResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.BroadcastTxRequest, ...grpc.CallOption) *tx.BroadcastTxResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.BroadcastTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.BroadcastTxRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_BroadcastTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastTx'
type MockTxServiceClient_BroadcastTx_Call struct {
	*mock.Call
}

// BroadcastTx is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.BroadcastTxRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) BroadcastTx(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_BroadcastTx_Call {
	return &MockTxServiceClient_BroadcastTx_Call{Call: _e.mock.On("BroadcastTx",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_BroadcastTx_Call) Run(run func(ctx context.Context, in *tx.BroadcastTxRequest, opts ...grpc.CallOption)) *MockTxServiceClient_BroadcastTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.BroadcastTxRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_BroadcastTx_Call) Return(_a0 *tx.BroadcastTxResponse, _a1 error) *MockTxServiceClient_BroadcastTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_BroadcastTx_Call) RunAndReturn(run func(context.Context, *tx.BroadcastTxRequest, ...grpc.CallOption) (*tx.BroadcastTxResponse, error)) *MockTxServiceClient_BroadcastTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockWithTxs provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) GetBlockWithTxs(ctx context.Context, in *tx.GetBlockWithTxsRequest, opts ...grpc.CallOption) (*tx.GetBlockWithTxsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockWithTxs")
	}

	var r0 *tx.GetBlockWithTxsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.GetBlockWithTxsRequest, ...grpc.CallOption) (*tx.GetBlockWithTxsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.GetBlockWithTxsRequest, ...grpc.CallOption) *tx.GetBlockWithTxsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetBlockWithTxsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.GetBlockWithTxsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_GetBlockWithTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockWithTxs'
type MockTxServiceClient_GetBlockWithTxs_Call struct {
	*mock.Call
}

// GetBlockWithTxs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.GetBlockWithTxsRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) GetBlockWithTxs(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_GetBlockWithTxs_Call {
	return &MockTxServiceClient_GetBlockWithTxs_Call{Call: _e.mock.On("GetBlockWithTxs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_GetBlockWithTxs_Call) Run(run func(ctx context.Context, in *tx.GetBlockWithTxsRequest, opts ...grpc.CallOption)) *MockTxServiceClient_GetBlockWithTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.GetBlockWithTxsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_GetBlockWithTxs_Call) Return(_a0 *tx.GetBlockWithTxsResponse, _a1 error) *MockTxServiceClient_GetBlockWithTxs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_GetBlockWithTxs_Call) RunAndReturn(run func(context.Context, *tx.GetBlockWithTxsRequest, ...grpc.CallOption) (*tx.GetBlockWithTxsResponse, error)) *MockTxServiceClient_GetBlockWithTxs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTx provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) GetTx(ctx context.Context, in *tx.GetTxRequest, opts ...grpc.CallOption) (*tx.GetTxResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 *tx.GetTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.GetTxRequest, ...grpc.CallOption) (*tx.GetTxResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.GetTxRequest, ...grpc.CallOption) *tx.GetTxResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.GetTxRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_GetTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTx'
type MockTxServiceClient_GetTx_Call struct {
	*mock.Call
}

// GetTx is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.GetTxRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) GetTx(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_GetTx_Call {
	return &MockTxServiceClient_GetTx_Call{Call: _e.mock.On("GetTx",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_GetTx_Call) Run(run func(ctx context.Context, in *tx.GetTxRequest, opts ...grpc.CallOption)) *MockTxServiceClient_GetTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.GetTxRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_GetTx_Call) Return(_a0 *tx.GetTxResponse, _a1 error) *MockTxServiceClient_GetTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_GetTx_Call) RunAndReturn(run func(context.Context, *tx.GetTxRequest, ...grpc.CallOption) (*tx.GetTxResponse, error)) *MockTxServiceClient_GetTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxsEvent provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) GetTxsEvent(ctx context.Context, in *tx.GetTxsEventRequest, opts ...grpc.CallOption) (*tx.GetTxsEventResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTxsEvent")
	}

	var r0 *tx.GetTxsEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.GetTxsEventRequest, ...grpc.CallOption) (*tx.GetTxsEventResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.GetTxsEventRequest, ...grpc.CallOption) *tx.GetTxsEventResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxsEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.GetTxsEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_GetTxsEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxsEvent'
type MockTxServiceClient_GetTxsEvent_Call struct {
	*mock.Call
}

// GetTxsEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.GetTxsEventRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) GetTxsEvent(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_GetTxsEvent_Call {
	return &MockTxServiceClient_GetTxsEvent_Call{Call: _e.mock.On("GetTxsEvent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_GetTxsEvent_Call) Run(run func(ctx context.Context, in *tx.GetTxsEventRequest, opts ...grpc.CallOption)) *MockTxServiceClient_GetTxsEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.GetTxsEventRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_GetTxsEvent_Call) Return(_a0 *tx.GetTxsEventResponse, _a1 error) *MockTxServiceClient_GetTxsEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_GetTxsEvent_Call) RunAndReturn(run func(context.Context, *tx.GetTxsEventRequest, ...grpc.CallOption) (*tx.GetTxsEventResponse, error)) *MockTxServiceClient_GetTxsEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Simulate provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) Simulate(ctx context.Context, in *tx.SimulateRequest, opts ...grpc.CallOption) (*tx.SimulateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Simulate")
	}

	var r0 *tx.SimulateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.SimulateRequest, ...grpc.CallOption) (*tx.SimulateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.SimulateRequest, ...grpc.CallOption) *tx.SimulateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.SimulateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.SimulateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_Simulate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Simulate'
type MockTxServiceClient_Simulate_Call struct {
	*mock.Call
}

// Simulate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.SimulateRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) Simulate(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_Simulate_Call {
	return &MockTxServiceClient_Simulate_Call{Call: _e.mock.On("Simulate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_Simulate_Call) Run(run func(ctx context.Context, in *tx.SimulateRequest, opts ...grpc.CallOption)) *MockTxServiceClient_Simulate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.SimulateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_Simulate_Call) Return(_a0 *tx.SimulateResponse, _a1 error) *MockTxServiceClient_Simulate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_Simulate_Call) RunAndReturn(run func(context.Context, *tx.SimulateRequest, ...grpc.CallOption) (*tx.SimulateResponse, error)) *MockTxServiceClient_Simulate_Call {
	_c.Call.Return(run)
	return _c
}

// TxDecode provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) TxDecode(ctx context.Context, in *tx.TxDecodeRequest, opts ...grpc.CallOption) (*tx.TxDecodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TxDecode")
	}

	var r0 *tx.TxDecodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxDecodeRequest, ...grpc.CallOption) (*tx.TxDecodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxDecodeRequest, ...grpc.CallOption) *tx.TxDecodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.TxDecodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.TxDecodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_TxDecode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxDecode'
type MockTxServiceClient_TxDecode_Call struct {
	*mock.Call
}

// TxDecode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.TxDecodeRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) TxDecode(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_TxDecode_Call {
	return &MockTxServiceClient_TxDecode_Call{Call: _e.mock.On("TxDecode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_TxDecode_Call) Run(run func(ctx context.Context, in *tx.TxDecodeRequest, opts ...grpc.CallOption)) *MockTxServiceClient_TxDecode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.TxDecodeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_TxDecode_Call) Return(_a0 *tx.TxDecodeResponse, _a1 error) *MockTxServiceClient_TxDecode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_TxDecode_Call) RunAndReturn(run func(context.Context, *tx.TxDecodeRequest, ...grpc.CallOption) (*tx.TxDecodeResponse, error)) *MockTxServiceClient_TxDecode_Call {
	_c.Call.Return(run)
	return _c
}

// TxDecodeAmino provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) TxDecodeAmino(ctx context.Context, in *tx.TxDecodeAminoRequest, opts ...grpc.CallOption) (*tx.TxDecodeAminoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TxDecodeAmino")
	}

	var r0 *tx.TxDecodeAminoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxDecodeAminoRequest, ...grpc.CallOption) (*tx.TxDecodeAminoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxDecodeAminoRequest, ...grpc.CallOption) *tx.TxDecodeAminoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.TxDecodeAminoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.TxDecodeAminoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_TxDecodeAmino_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxDecodeAmino'
type MockTxServiceClient_TxDecodeAmino_Call struct {
	*mock.Call
}

// TxDecodeAmino is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.TxDecodeAminoRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) TxDecodeAmino(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_TxDecodeAmino_Call {
	return &MockTxServiceClient_TxDecodeAmino_Call{Call: _e.mock.On("TxDecodeAmino",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_TxDecodeAmino_Call) Run(run func(ctx context.Context, in *tx.TxDecodeAminoRequest, opts ...grpc.CallOption)) *MockTxServiceClient_TxDecodeAmino_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.TxDecodeAminoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_TxDecodeAmino_Call) Return(_a0 *tx.TxDecodeAminoResponse, _a1 error) *MockTxServiceClient_TxDecodeAmino_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_TxDecodeAmino_Call) RunAndReturn(run func(context.Context, *tx.TxDecodeAminoRequest, ...grpc.CallOption) (*tx.TxDecodeAminoResponse, error)) *MockTxServiceClient_TxDecodeAmino_Call {
	_c.Call.Return(run)
	return _c
}

// TxEncode provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) TxEncode(ctx context.Context, in *tx.TxEncodeRequest, opts ...grpc.CallOption) (*tx.TxEncodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TxEncode")
	}

	var r0 *tx.TxEncodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxEncodeRequest, ...grpc.CallOption) (*tx.TxEncodeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxEncodeRequest, ...grpc.CallOption) *tx.TxEncodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.TxEncodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.TxEncodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_TxEncode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxEncode'
type MockTxServiceClient_TxEncode_Call struct {
	*mock.Call
}

// TxEncode is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.TxEncodeRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) TxEncode(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_TxEncode_Call {
	return &MockTxServiceClient_TxEncode_Call{Call: _e.mock.On("TxEncode",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_TxEncode_Call) Run(run func(ctx context.Context, in *tx.TxEncodeRequest, opts ...grpc.CallOption)) *MockTxServiceClient_TxEncode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.TxEncodeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_TxEncode_Call) Return(_a0 *tx.TxEncodeResponse, _a1 error) *MockTxServiceClient_TxEncode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_TxEncode_Call) RunAndReturn(run func(context.Context, *tx.TxEncodeRequest, ...grpc.CallOption) (*tx.TxEncodeResponse, error)) *MockTxServiceClient_TxEncode_Call {
	_c.Call.Return(run)
	return _c
}

// TxEncodeAmino provides a mock function with given fields: ctx, in, opts
func (_m *MockTxServiceClient) TxEncodeAmino(ctx context.Context, in *tx.TxEncodeAminoRequest, opts ...grpc.CallOption) (*tx.TxEncodeAminoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TxEncodeAmino")
	}

	var r0 *tx.TxEncodeAminoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxEncodeAminoRequest, ...grpc.CallOption) (*tx.TxEncodeAminoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tx.TxEncodeAminoRequest, ...grpc.CallOption) *tx.TxEncodeAminoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.TxEncodeAminoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tx.TxEncodeAminoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxServiceClient_TxEncodeAmino_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxEncodeAmino'
type MockTxServiceClient_TxEncodeAmino_Call struct {
	*mock.Call
}

// TxEncodeAmino is a helper method to define mock.On call
//   - ctx context.Context
//   - in *tx.TxEncodeAminoRequest
//   - opts ...grpc.CallOption
func (_e *MockTxServiceClient_Expecter) TxEncodeAmino(ctx interface{}, in interface{}, opts ...interface{}) *MockTxServiceClient_TxEncodeAmino_Call {
	return &MockTxServiceClient_TxEncodeAmino_Call{Call: _e.mock.On("TxEncodeAmino",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTxServiceClient_TxEncodeAmino_Call) Run(run func(ctx context.Context, in *tx.TxEncodeAminoRequest, opts ...grpc.CallOption)) *MockTxServiceClient_TxEncodeAmino_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*tx.TxEncodeAminoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTxServiceClient_TxEncodeAmino_Call) Return(_a0 *tx.TxEncodeAminoResponse, _a1 error) *MockTxServiceClient_TxEncodeAmino_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxServiceClient_TxEncodeAmino_Call) RunAndReturn(run func(context.Context, *tx.TxEncodeAminoRequest, ...grpc.CallOption) (*tx.TxEncodeAminoResponse, error)) *MockTxServiceClient_TxEncodeAmino_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTxServiceClient creates a new instance of MockTxServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxServiceClient {
	mock := &MockTxServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
