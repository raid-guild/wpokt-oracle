// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	autogen "github.com/dan13ram/wpokt-oracle/ethereum/autogen"

	mock "github.com/stretchr/testify/mock"
)

// MockMintControllerFulfillmentIterator is an autogenerated mock type for the MintControllerFulfillmentIterator type
type MockMintControllerFulfillmentIterator struct {
	mock.Mock
}

type MockMintControllerFulfillmentIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMintControllerFulfillmentIterator) EXPECT() *MockMintControllerFulfillmentIterator_Expecter {
	return &MockMintControllerFulfillmentIterator_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockMintControllerFulfillmentIterator) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMintControllerFulfillmentIterator_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockMintControllerFulfillmentIterator_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockMintControllerFulfillmentIterator_Expecter) Close() *MockMintControllerFulfillmentIterator_Close_Call {
	return &MockMintControllerFulfillmentIterator_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockMintControllerFulfillmentIterator_Close_Call) Run(run func()) *MockMintControllerFulfillmentIterator_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Close_Call) Return(_a0 error) *MockMintControllerFulfillmentIterator_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Close_Call) RunAndReturn(run func() error) *MockMintControllerFulfillmentIterator_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields:
func (_m *MockMintControllerFulfillmentIterator) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMintControllerFulfillmentIterator_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockMintControllerFulfillmentIterator_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockMintControllerFulfillmentIterator_Expecter) Error() *MockMintControllerFulfillmentIterator_Error_Call {
	return &MockMintControllerFulfillmentIterator_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockMintControllerFulfillmentIterator_Error_Call) Run(run func()) *MockMintControllerFulfillmentIterator_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Error_Call) Return(_a0 error) *MockMintControllerFulfillmentIterator_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Error_Call) RunAndReturn(run func() error) *MockMintControllerFulfillmentIterator_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields:
func (_m *MockMintControllerFulfillmentIterator) Event() *autogen.MintControllerFulfillment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Event")
	}

	var r0 *autogen.MintControllerFulfillment
	if rf, ok := ret.Get(0).(func() *autogen.MintControllerFulfillment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autogen.MintControllerFulfillment)
		}
	}

	return r0
}

// MockMintControllerFulfillmentIterator_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type MockMintControllerFulfillmentIterator_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
func (_e *MockMintControllerFulfillmentIterator_Expecter) Event() *MockMintControllerFulfillmentIterator_Event_Call {
	return &MockMintControllerFulfillmentIterator_Event_Call{Call: _e.mock.On("Event")}
}

func (_c *MockMintControllerFulfillmentIterator_Event_Call) Run(run func()) *MockMintControllerFulfillmentIterator_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Event_Call) Return(_a0 *autogen.MintControllerFulfillment) *MockMintControllerFulfillmentIterator_Event_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Event_Call) RunAndReturn(run func() *autogen.MintControllerFulfillment) *MockMintControllerFulfillmentIterator_Event_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields:
func (_m *MockMintControllerFulfillmentIterator) Next() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMintControllerFulfillmentIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockMintControllerFulfillmentIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockMintControllerFulfillmentIterator_Expecter) Next() *MockMintControllerFulfillmentIterator_Next_Call {
	return &MockMintControllerFulfillmentIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockMintControllerFulfillmentIterator_Next_Call) Run(run func()) *MockMintControllerFulfillmentIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Next_Call) Return(_a0 bool) *MockMintControllerFulfillmentIterator_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMintControllerFulfillmentIterator_Next_Call) RunAndReturn(run func() bool) *MockMintControllerFulfillmentIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMintControllerFulfillmentIterator creates a new instance of MockMintControllerFulfillmentIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMintControllerFulfillmentIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMintControllerFulfillmentIterator {
	mock := &MockMintControllerFulfillmentIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
