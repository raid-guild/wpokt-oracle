// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/auth/types"
)

// MockAuthQueryClient is an autogenerated mock type for the QueryClient type
type MockAuthQueryClient struct {
	mock.Mock
}

type MockAuthQueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthQueryClient) EXPECT() *MockAuthQueryClient_Expecter {
	return &MockAuthQueryClient_Expecter{mock: &_m.Mock}
}

// Account provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) Account(ctx context.Context, in *types.QueryAccountRequest, opts ...grpc.CallOption) (*types.QueryAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Account")
	}

	var r0 *types.QueryAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountRequest, ...grpc.CallOption) (*types.QueryAccountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountRequest, ...grpc.CallOption) *types.QueryAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_Account_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Account'
type MockAuthQueryClient_Account_Call struct {
	*mock.Call
}

// Account is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryAccountRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) Account(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_Account_Call {
	return &MockAuthQueryClient_Account_Call{Call: _e.mock.On("Account",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_Account_Call) Run(run func(ctx context.Context, in *types.QueryAccountRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_Account_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryAccountRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_Account_Call) Return(_a0 *types.QueryAccountResponse, _a1 error) *MockAuthQueryClient_Account_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_Account_Call) RunAndReturn(run func(context.Context, *types.QueryAccountRequest, ...grpc.CallOption) (*types.QueryAccountResponse, error)) *MockAuthQueryClient_Account_Call {
	_c.Call.Return(run)
	return _c
}

// AccountAddressByID provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) AccountAddressByID(ctx context.Context, in *types.QueryAccountAddressByIDRequest, opts ...grpc.CallOption) (*types.QueryAccountAddressByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AccountAddressByID")
	}

	var r0 *types.QueryAccountAddressByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountAddressByIDRequest, ...grpc.CallOption) (*types.QueryAccountAddressByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountAddressByIDRequest, ...grpc.CallOption) *types.QueryAccountAddressByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAccountAddressByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAccountAddressByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_AccountAddressByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountAddressByID'
type MockAuthQueryClient_AccountAddressByID_Call struct {
	*mock.Call
}

// AccountAddressByID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryAccountAddressByIDRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) AccountAddressByID(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_AccountAddressByID_Call {
	return &MockAuthQueryClient_AccountAddressByID_Call{Call: _e.mock.On("AccountAddressByID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_AccountAddressByID_Call) Run(run func(ctx context.Context, in *types.QueryAccountAddressByIDRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_AccountAddressByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryAccountAddressByIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_AccountAddressByID_Call) Return(_a0 *types.QueryAccountAddressByIDResponse, _a1 error) *MockAuthQueryClient_AccountAddressByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_AccountAddressByID_Call) RunAndReturn(run func(context.Context, *types.QueryAccountAddressByIDRequest, ...grpc.CallOption) (*types.QueryAccountAddressByIDResponse, error)) *MockAuthQueryClient_AccountAddressByID_Call {
	_c.Call.Return(run)
	return _c
}

// AccountInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) AccountInfo(ctx context.Context, in *types.QueryAccountInfoRequest, opts ...grpc.CallOption) (*types.QueryAccountInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AccountInfo")
	}

	var r0 *types.QueryAccountInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountInfoRequest, ...grpc.CallOption) (*types.QueryAccountInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountInfoRequest, ...grpc.CallOption) *types.QueryAccountInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAccountInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAccountInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_AccountInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountInfo'
type MockAuthQueryClient_AccountInfo_Call struct {
	*mock.Call
}

// AccountInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryAccountInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) AccountInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_AccountInfo_Call {
	return &MockAuthQueryClient_AccountInfo_Call{Call: _e.mock.On("AccountInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_AccountInfo_Call) Run(run func(ctx context.Context, in *types.QueryAccountInfoRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_AccountInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryAccountInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_AccountInfo_Call) Return(_a0 *types.QueryAccountInfoResponse, _a1 error) *MockAuthQueryClient_AccountInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_AccountInfo_Call) RunAndReturn(run func(context.Context, *types.QueryAccountInfoRequest, ...grpc.CallOption) (*types.QueryAccountInfoResponse, error)) *MockAuthQueryClient_AccountInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Accounts provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) Accounts(ctx context.Context, in *types.QueryAccountsRequest, opts ...grpc.CallOption) (*types.QueryAccountsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Accounts")
	}

	var r0 *types.QueryAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountsRequest, ...grpc.CallOption) (*types.QueryAccountsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAccountsRequest, ...grpc.CallOption) *types.QueryAccountsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAccountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_Accounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accounts'
type MockAuthQueryClient_Accounts_Call struct {
	*mock.Call
}

// Accounts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryAccountsRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) Accounts(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_Accounts_Call {
	return &MockAuthQueryClient_Accounts_Call{Call: _e.mock.On("Accounts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_Accounts_Call) Run(run func(ctx context.Context, in *types.QueryAccountsRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_Accounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryAccountsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_Accounts_Call) Return(_a0 *types.QueryAccountsResponse, _a1 error) *MockAuthQueryClient_Accounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_Accounts_Call) RunAndReturn(run func(context.Context, *types.QueryAccountsRequest, ...grpc.CallOption) (*types.QueryAccountsResponse, error)) *MockAuthQueryClient_Accounts_Call {
	_c.Call.Return(run)
	return _c
}

// AddressBytesToString provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) AddressBytesToString(ctx context.Context, in *types.AddressBytesToStringRequest, opts ...grpc.CallOption) (*types.AddressBytesToStringResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddressBytesToString")
	}

	var r0 *types.AddressBytesToStringResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddressBytesToStringRequest, ...grpc.CallOption) (*types.AddressBytesToStringResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddressBytesToStringRequest, ...grpc.CallOption) *types.AddressBytesToStringResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AddressBytesToStringResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.AddressBytesToStringRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_AddressBytesToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressBytesToString'
type MockAuthQueryClient_AddressBytesToString_Call struct {
	*mock.Call
}

// AddressBytesToString is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.AddressBytesToStringRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) AddressBytesToString(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_AddressBytesToString_Call {
	return &MockAuthQueryClient_AddressBytesToString_Call{Call: _e.mock.On("AddressBytesToString",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_AddressBytesToString_Call) Run(run func(ctx context.Context, in *types.AddressBytesToStringRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_AddressBytesToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.AddressBytesToStringRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_AddressBytesToString_Call) Return(_a0 *types.AddressBytesToStringResponse, _a1 error) *MockAuthQueryClient_AddressBytesToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_AddressBytesToString_Call) RunAndReturn(run func(context.Context, *types.AddressBytesToStringRequest, ...grpc.CallOption) (*types.AddressBytesToStringResponse, error)) *MockAuthQueryClient_AddressBytesToString_Call {
	_c.Call.Return(run)
	return _c
}

// AddressStringToBytes provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) AddressStringToBytes(ctx context.Context, in *types.AddressStringToBytesRequest, opts ...grpc.CallOption) (*types.AddressStringToBytesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddressStringToBytes")
	}

	var r0 *types.AddressStringToBytesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddressStringToBytesRequest, ...grpc.CallOption) (*types.AddressStringToBytesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddressStringToBytesRequest, ...grpc.CallOption) *types.AddressStringToBytesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AddressStringToBytesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.AddressStringToBytesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_AddressStringToBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressStringToBytes'
type MockAuthQueryClient_AddressStringToBytes_Call struct {
	*mock.Call
}

// AddressStringToBytes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.AddressStringToBytesRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) AddressStringToBytes(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_AddressStringToBytes_Call {
	return &MockAuthQueryClient_AddressStringToBytes_Call{Call: _e.mock.On("AddressStringToBytes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_AddressStringToBytes_Call) Run(run func(ctx context.Context, in *types.AddressStringToBytesRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_AddressStringToBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.AddressStringToBytesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_AddressStringToBytes_Call) Return(_a0 *types.AddressStringToBytesResponse, _a1 error) *MockAuthQueryClient_AddressStringToBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_AddressStringToBytes_Call) RunAndReturn(run func(context.Context, *types.AddressStringToBytesRequest, ...grpc.CallOption) (*types.AddressStringToBytesResponse, error)) *MockAuthQueryClient_AddressStringToBytes_Call {
	_c.Call.Return(run)
	return _c
}

// Bech32Prefix provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) Bech32Prefix(ctx context.Context, in *types.Bech32PrefixRequest, opts ...grpc.CallOption) (*types.Bech32PrefixResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Bech32Prefix")
	}

	var r0 *types.Bech32PrefixResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Bech32PrefixRequest, ...grpc.CallOption) (*types.Bech32PrefixResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Bech32PrefixRequest, ...grpc.CallOption) *types.Bech32PrefixResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Bech32PrefixResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Bech32PrefixRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_Bech32Prefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bech32Prefix'
type MockAuthQueryClient_Bech32Prefix_Call struct {
	*mock.Call
}

// Bech32Prefix is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.Bech32PrefixRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) Bech32Prefix(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_Bech32Prefix_Call {
	return &MockAuthQueryClient_Bech32Prefix_Call{Call: _e.mock.On("Bech32Prefix",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_Bech32Prefix_Call) Run(run func(ctx context.Context, in *types.Bech32PrefixRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_Bech32Prefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.Bech32PrefixRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_Bech32Prefix_Call) Return(_a0 *types.Bech32PrefixResponse, _a1 error) *MockAuthQueryClient_Bech32Prefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_Bech32Prefix_Call) RunAndReturn(run func(context.Context, *types.Bech32PrefixRequest, ...grpc.CallOption) (*types.Bech32PrefixResponse, error)) *MockAuthQueryClient_Bech32Prefix_Call {
	_c.Call.Return(run)
	return _c
}

// ModuleAccountByName provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) ModuleAccountByName(ctx context.Context, in *types.QueryModuleAccountByNameRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModuleAccountByName")
	}

	var r0 *types.QueryModuleAccountByNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryModuleAccountByNameRequest, ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryModuleAccountByNameRequest, ...grpc.CallOption) *types.QueryModuleAccountByNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryModuleAccountByNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryModuleAccountByNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_ModuleAccountByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModuleAccountByName'
type MockAuthQueryClient_ModuleAccountByName_Call struct {
	*mock.Call
}

// ModuleAccountByName is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryModuleAccountByNameRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) ModuleAccountByName(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_ModuleAccountByName_Call {
	return &MockAuthQueryClient_ModuleAccountByName_Call{Call: _e.mock.On("ModuleAccountByName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_ModuleAccountByName_Call) Run(run func(ctx context.Context, in *types.QueryModuleAccountByNameRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_ModuleAccountByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryModuleAccountByNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_ModuleAccountByName_Call) Return(_a0 *types.QueryModuleAccountByNameResponse, _a1 error) *MockAuthQueryClient_ModuleAccountByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_ModuleAccountByName_Call) RunAndReturn(run func(context.Context, *types.QueryModuleAccountByNameRequest, ...grpc.CallOption) (*types.QueryModuleAccountByNameResponse, error)) *MockAuthQueryClient_ModuleAccountByName_Call {
	_c.Call.Return(run)
	return _c
}

// ModuleAccounts provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) ModuleAccounts(ctx context.Context, in *types.QueryModuleAccountsRequest, opts ...grpc.CallOption) (*types.QueryModuleAccountsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModuleAccounts")
	}

	var r0 *types.QueryModuleAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryModuleAccountsRequest, ...grpc.CallOption) (*types.QueryModuleAccountsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryModuleAccountsRequest, ...grpc.CallOption) *types.QueryModuleAccountsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryModuleAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryModuleAccountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_ModuleAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModuleAccounts'
type MockAuthQueryClient_ModuleAccounts_Call struct {
	*mock.Call
}

// ModuleAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryModuleAccountsRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) ModuleAccounts(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_ModuleAccounts_Call {
	return &MockAuthQueryClient_ModuleAccounts_Call{Call: _e.mock.On("ModuleAccounts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_ModuleAccounts_Call) Run(run func(ctx context.Context, in *types.QueryModuleAccountsRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_ModuleAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryModuleAccountsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_ModuleAccounts_Call) Return(_a0 *types.QueryModuleAccountsResponse, _a1 error) *MockAuthQueryClient_ModuleAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_ModuleAccounts_Call) RunAndReturn(run func(context.Context, *types.QueryModuleAccountsRequest, ...grpc.CallOption) (*types.QueryModuleAccountsResponse, error)) *MockAuthQueryClient_ModuleAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthQueryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) *types.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthQueryClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type MockAuthQueryClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryParamsRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthQueryClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthQueryClient_Params_Call {
	return &MockAuthQueryClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthQueryClient_Params_Call) Run(run func(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption)) *MockAuthQueryClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryParamsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthQueryClient_Params_Call) Return(_a0 *types.QueryParamsResponse, _a1 error) *MockAuthQueryClient_Params_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthQueryClient_Params_Call) RunAndReturn(run func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)) *MockAuthQueryClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthQueryClient creates a new instance of MockAuthQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthQueryClient {
	mock := &MockAuthQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
