// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cmtservice "github.com/cosmos/cosmos-sdk/client/grpc/cmtservice"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockCMTServiceClient is an autogenerated mock type for the ServiceClient type
type MockCMTServiceClient struct {
	mock.Mock
}

type MockCMTServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCMTServiceClient) EXPECT() *MockCMTServiceClient_Expecter {
	return &MockCMTServiceClient_Expecter{mock: &_m.Mock}
}

// ABCIQuery provides a mock function with given fields: ctx, in, opts
func (_m *MockCMTServiceClient) ABCIQuery(ctx context.Context, in *cmtservice.ABCIQueryRequest, opts ...grpc.CallOption) (*cmtservice.ABCIQueryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ABCIQuery")
	}

	var r0 *cmtservice.ABCIQueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.ABCIQueryRequest, ...grpc.CallOption) (*cmtservice.ABCIQueryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.ABCIQueryRequest, ...grpc.CallOption) *cmtservice.ABCIQueryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmtservice.ABCIQueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cmtservice.ABCIQueryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCMTServiceClient_ABCIQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ABCIQuery'
type MockCMTServiceClient_ABCIQuery_Call struct {
	*mock.Call
}

// ABCIQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cmtservice.ABCIQueryRequest
//   - opts ...grpc.CallOption
func (_e *MockCMTServiceClient_Expecter) ABCIQuery(ctx interface{}, in interface{}, opts ...interface{}) *MockCMTServiceClient_ABCIQuery_Call {
	return &MockCMTServiceClient_ABCIQuery_Call{Call: _e.mock.On("ABCIQuery",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCMTServiceClient_ABCIQuery_Call) Run(run func(ctx context.Context, in *cmtservice.ABCIQueryRequest, opts ...grpc.CallOption)) *MockCMTServiceClient_ABCIQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cmtservice.ABCIQueryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCMTServiceClient_ABCIQuery_Call) Return(_a0 *cmtservice.ABCIQueryResponse, _a1 error) *MockCMTServiceClient_ABCIQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCMTServiceClient_ABCIQuery_Call) RunAndReturn(run func(context.Context, *cmtservice.ABCIQueryRequest, ...grpc.CallOption) (*cmtservice.ABCIQueryResponse, error)) *MockCMTServiceClient_ABCIQuery_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockCMTServiceClient) GetBlockByHeight(ctx context.Context, in *cmtservice.GetBlockByHeightRequest, opts ...grpc.CallOption) (*cmtservice.GetBlockByHeightResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 *cmtservice.GetBlockByHeightResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetBlockByHeightRequest, ...grpc.CallOption) (*cmtservice.GetBlockByHeightResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetBlockByHeightRequest, ...grpc.CallOption) *cmtservice.GetBlockByHeightResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmtservice.GetBlockByHeightResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cmtservice.GetBlockByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCMTServiceClient_GetBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHeight'
type MockCMTServiceClient_GetBlockByHeight_Call struct {
	*mock.Call
}

// GetBlockByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cmtservice.GetBlockByHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockCMTServiceClient_Expecter) GetBlockByHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockCMTServiceClient_GetBlockByHeight_Call {
	return &MockCMTServiceClient_GetBlockByHeight_Call{Call: _e.mock.On("GetBlockByHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCMTServiceClient_GetBlockByHeight_Call) Run(run func(ctx context.Context, in *cmtservice.GetBlockByHeightRequest, opts ...grpc.CallOption)) *MockCMTServiceClient_GetBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cmtservice.GetBlockByHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCMTServiceClient_GetBlockByHeight_Call) Return(_a0 *cmtservice.GetBlockByHeightResponse, _a1 error) *MockCMTServiceClient_GetBlockByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCMTServiceClient_GetBlockByHeight_Call) RunAndReturn(run func(context.Context, *cmtservice.GetBlockByHeightRequest, ...grpc.CallOption) (*cmtservice.GetBlockByHeightResponse, error)) *MockCMTServiceClient_GetBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockCMTServiceClient) GetLatestBlock(ctx context.Context, in *cmtservice.GetLatestBlockRequest, opts ...grpc.CallOption) (*cmtservice.GetLatestBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlock")
	}

	var r0 *cmtservice.GetLatestBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetLatestBlockRequest, ...grpc.CallOption) (*cmtservice.GetLatestBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetLatestBlockRequest, ...grpc.CallOption) *cmtservice.GetLatestBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmtservice.GetLatestBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cmtservice.GetLatestBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCMTServiceClient_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type MockCMTServiceClient_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cmtservice.GetLatestBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockCMTServiceClient_Expecter) GetLatestBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockCMTServiceClient_GetLatestBlock_Call {
	return &MockCMTServiceClient_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCMTServiceClient_GetLatestBlock_Call) Run(run func(ctx context.Context, in *cmtservice.GetLatestBlockRequest, opts ...grpc.CallOption)) *MockCMTServiceClient_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cmtservice.GetLatestBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCMTServiceClient_GetLatestBlock_Call) Return(_a0 *cmtservice.GetLatestBlockResponse, _a1 error) *MockCMTServiceClient_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCMTServiceClient_GetLatestBlock_Call) RunAndReturn(run func(context.Context, *cmtservice.GetLatestBlockRequest, ...grpc.CallOption) (*cmtservice.GetLatestBlockResponse, error)) *MockCMTServiceClient_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestValidatorSet provides a mock function with given fields: ctx, in, opts
func (_m *MockCMTServiceClient) GetLatestValidatorSet(ctx context.Context, in *cmtservice.GetLatestValidatorSetRequest, opts ...grpc.CallOption) (*cmtservice.GetLatestValidatorSetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestValidatorSet")
	}

	var r0 *cmtservice.GetLatestValidatorSetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetLatestValidatorSetRequest, ...grpc.CallOption) (*cmtservice.GetLatestValidatorSetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetLatestValidatorSetRequest, ...grpc.CallOption) *cmtservice.GetLatestValidatorSetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmtservice.GetLatestValidatorSetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cmtservice.GetLatestValidatorSetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCMTServiceClient_GetLatestValidatorSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestValidatorSet'
type MockCMTServiceClient_GetLatestValidatorSet_Call struct {
	*mock.Call
}

// GetLatestValidatorSet is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cmtservice.GetLatestValidatorSetRequest
//   - opts ...grpc.CallOption
func (_e *MockCMTServiceClient_Expecter) GetLatestValidatorSet(ctx interface{}, in interface{}, opts ...interface{}) *MockCMTServiceClient_GetLatestValidatorSet_Call {
	return &MockCMTServiceClient_GetLatestValidatorSet_Call{Call: _e.mock.On("GetLatestValidatorSet",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCMTServiceClient_GetLatestValidatorSet_Call) Run(run func(ctx context.Context, in *cmtservice.GetLatestValidatorSetRequest, opts ...grpc.CallOption)) *MockCMTServiceClient_GetLatestValidatorSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cmtservice.GetLatestValidatorSetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCMTServiceClient_GetLatestValidatorSet_Call) Return(_a0 *cmtservice.GetLatestValidatorSetResponse, _a1 error) *MockCMTServiceClient_GetLatestValidatorSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCMTServiceClient_GetLatestValidatorSet_Call) RunAndReturn(run func(context.Context, *cmtservice.GetLatestValidatorSetRequest, ...grpc.CallOption) (*cmtservice.GetLatestValidatorSetResponse, error)) *MockCMTServiceClient_GetLatestValidatorSet_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockCMTServiceClient) GetNodeInfo(ctx context.Context, in *cmtservice.GetNodeInfoRequest, opts ...grpc.CallOption) (*cmtservice.GetNodeInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeInfo")
	}

	var r0 *cmtservice.GetNodeInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetNodeInfoRequest, ...grpc.CallOption) (*cmtservice.GetNodeInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetNodeInfoRequest, ...grpc.CallOption) *cmtservice.GetNodeInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmtservice.GetNodeInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cmtservice.GetNodeInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCMTServiceClient_GetNodeInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeInfo'
type MockCMTServiceClient_GetNodeInfo_Call struct {
	*mock.Call
}

// GetNodeInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cmtservice.GetNodeInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockCMTServiceClient_Expecter) GetNodeInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockCMTServiceClient_GetNodeInfo_Call {
	return &MockCMTServiceClient_GetNodeInfo_Call{Call: _e.mock.On("GetNodeInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCMTServiceClient_GetNodeInfo_Call) Run(run func(ctx context.Context, in *cmtservice.GetNodeInfoRequest, opts ...grpc.CallOption)) *MockCMTServiceClient_GetNodeInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cmtservice.GetNodeInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCMTServiceClient_GetNodeInfo_Call) Return(_a0 *cmtservice.GetNodeInfoResponse, _a1 error) *MockCMTServiceClient_GetNodeInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCMTServiceClient_GetNodeInfo_Call) RunAndReturn(run func(context.Context, *cmtservice.GetNodeInfoRequest, ...grpc.CallOption) (*cmtservice.GetNodeInfoResponse, error)) *MockCMTServiceClient_GetNodeInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncing provides a mock function with given fields: ctx, in, opts
func (_m *MockCMTServiceClient) GetSyncing(ctx context.Context, in *cmtservice.GetSyncingRequest, opts ...grpc.CallOption) (*cmtservice.GetSyncingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncing")
	}

	var r0 *cmtservice.GetSyncingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetSyncingRequest, ...grpc.CallOption) (*cmtservice.GetSyncingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetSyncingRequest, ...grpc.CallOption) *cmtservice.GetSyncingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmtservice.GetSyncingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cmtservice.GetSyncingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCMTServiceClient_GetSyncing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncing'
type MockCMTServiceClient_GetSyncing_Call struct {
	*mock.Call
}

// GetSyncing is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cmtservice.GetSyncingRequest
//   - opts ...grpc.CallOption
func (_e *MockCMTServiceClient_Expecter) GetSyncing(ctx interface{}, in interface{}, opts ...interface{}) *MockCMTServiceClient_GetSyncing_Call {
	return &MockCMTServiceClient_GetSyncing_Call{Call: _e.mock.On("GetSyncing",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCMTServiceClient_GetSyncing_Call) Run(run func(ctx context.Context, in *cmtservice.GetSyncingRequest, opts ...grpc.CallOption)) *MockCMTServiceClient_GetSyncing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cmtservice.GetSyncingRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCMTServiceClient_GetSyncing_Call) Return(_a0 *cmtservice.GetSyncingResponse, _a1 error) *MockCMTServiceClient_GetSyncing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCMTServiceClient_GetSyncing_Call) RunAndReturn(run func(context.Context, *cmtservice.GetSyncingRequest, ...grpc.CallOption) (*cmtservice.GetSyncingResponse, error)) *MockCMTServiceClient_GetSyncing_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatorSetByHeight provides a mock function with given fields: ctx, in, opts
func (_m *MockCMTServiceClient) GetValidatorSetByHeight(ctx context.Context, in *cmtservice.GetValidatorSetByHeightRequest, opts ...grpc.CallOption) (*cmtservice.GetValidatorSetByHeightResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorSetByHeight")
	}

	var r0 *cmtservice.GetValidatorSetByHeightResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetValidatorSetByHeightRequest, ...grpc.CallOption) (*cmtservice.GetValidatorSetByHeightResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cmtservice.GetValidatorSetByHeightRequest, ...grpc.CallOption) *cmtservice.GetValidatorSetByHeightResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cmtservice.GetValidatorSetByHeightResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cmtservice.GetValidatorSetByHeightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCMTServiceClient_GetValidatorSetByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorSetByHeight'
type MockCMTServiceClient_GetValidatorSetByHeight_Call struct {
	*mock.Call
}

// GetValidatorSetByHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cmtservice.GetValidatorSetByHeightRequest
//   - opts ...grpc.CallOption
func (_e *MockCMTServiceClient_Expecter) GetValidatorSetByHeight(ctx interface{}, in interface{}, opts ...interface{}) *MockCMTServiceClient_GetValidatorSetByHeight_Call {
	return &MockCMTServiceClient_GetValidatorSetByHeight_Call{Call: _e.mock.On("GetValidatorSetByHeight",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCMTServiceClient_GetValidatorSetByHeight_Call) Run(run func(ctx context.Context, in *cmtservice.GetValidatorSetByHeightRequest, opts ...grpc.CallOption)) *MockCMTServiceClient_GetValidatorSetByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cmtservice.GetValidatorSetByHeightRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCMTServiceClient_GetValidatorSetByHeight_Call) Return(_a0 *cmtservice.GetValidatorSetByHeightResponse, _a1 error) *MockCMTServiceClient_GetValidatorSetByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCMTServiceClient_GetValidatorSetByHeight_Call) RunAndReturn(run func(context.Context, *cmtservice.GetValidatorSetByHeightRequest, ...grpc.CallOption) (*cmtservice.GetValidatorSetByHeightResponse, error)) *MockCMTServiceClient_GetValidatorSetByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCMTServiceClient creates a new instance of MockCMTServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCMTServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCMTServiceClient {
	mock := &MockCMTServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
