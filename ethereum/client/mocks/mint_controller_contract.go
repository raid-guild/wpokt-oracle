// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	big "math/big"

	autogen "github.com/dan13ram/wpokt-oracle/ethereum/autogen"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	client "github.com/dan13ram/wpokt-oracle/ethereum/client"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockMintControllerContract is an autogenerated mock type for the MintControllerContract type
type MockMintControllerContract struct {
	mock.Mock
}

type MockMintControllerContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMintControllerContract) EXPECT() *MockMintControllerContract_Expecter {
	return &MockMintControllerContract_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *MockMintControllerContract) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// MockMintControllerContract_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockMintControllerContract_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockMintControllerContract_Expecter) Address() *MockMintControllerContract_Address_Call {
	return &MockMintControllerContract_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockMintControllerContract_Address_Call) Run(run func()) *MockMintControllerContract_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMintControllerContract_Address_Call) Return(_a0 common.Address) *MockMintControllerContract_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMintControllerContract_Address_Call) RunAndReturn(run func() common.Address) *MockMintControllerContract_Address_Call {
	_c.Call.Return(run)
	return _c
}

// FilterFulfillment provides a mock function with given fields: opts, orderID
func (_m *MockMintControllerContract) FilterFulfillment(opts *bind.FilterOpts, orderID [][32]byte) (client.MintControllerFulfillmentIterator, error) {
	ret := _m.Called(opts, orderID)

	if len(ret) == 0 {
		panic("no return value specified for FilterFulfillment")
	}

	var r0 client.MintControllerFulfillmentIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, [][32]byte) (client.MintControllerFulfillmentIterator, error)); ok {
		return rf(opts, orderID)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, [][32]byte) client.MintControllerFulfillmentIterator); ok {
		r0 = rf(opts, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.MintControllerFulfillmentIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, [][32]byte) error); ok {
		r1 = rf(opts, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMintControllerContract_FilterFulfillment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterFulfillment'
type MockMintControllerContract_FilterFulfillment_Call struct {
	*mock.Call
}

// FilterFulfillment is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - orderID [][32]byte
func (_e *MockMintControllerContract_Expecter) FilterFulfillment(opts interface{}, orderID interface{}) *MockMintControllerContract_FilterFulfillment_Call {
	return &MockMintControllerContract_FilterFulfillment_Call{Call: _e.mock.On("FilterFulfillment", opts, orderID)}
}

func (_c *MockMintControllerContract_FilterFulfillment_Call) Run(run func(opts *bind.FilterOpts, orderID [][32]byte)) *MockMintControllerContract_FilterFulfillment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([][32]byte))
	})
	return _c
}

func (_c *MockMintControllerContract_FilterFulfillment_Call) Return(_a0 client.MintControllerFulfillmentIterator, _a1 error) *MockMintControllerContract_FilterFulfillment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMintControllerContract_FilterFulfillment_Call) RunAndReturn(run func(*bind.FilterOpts, [][32]byte) (client.MintControllerFulfillmentIterator, error)) *MockMintControllerContract_FilterFulfillment_Call {
	_c.Call.Return(run)
	return _c
}

// MaxMintLimit provides a mock function with given fields: opts
func (_m *MockMintControllerContract) MaxMintLimit(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for MaxMintLimit")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMintControllerContract_MaxMintLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxMintLimit'
type MockMintControllerContract_MaxMintLimit_Call struct {
	*mock.Call
}

// MaxMintLimit is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MockMintControllerContract_Expecter) MaxMintLimit(opts interface{}) *MockMintControllerContract_MaxMintLimit_Call {
	return &MockMintControllerContract_MaxMintLimit_Call{Call: _e.mock.On("MaxMintLimit", opts)}
}

func (_c *MockMintControllerContract_MaxMintLimit_Call) Run(run func(opts *bind.CallOpts)) *MockMintControllerContract_MaxMintLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MockMintControllerContract_MaxMintLimit_Call) Return(_a0 *big.Int, _a1 error) *MockMintControllerContract_MaxMintLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMintControllerContract_MaxMintLimit_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *MockMintControllerContract_MaxMintLimit_Call {
	_c.Call.Return(run)
	return _c
}

// ParseFulfillment provides a mock function with given fields: log
func (_m *MockMintControllerContract) ParseFulfillment(log types.Log) (*autogen.MintControllerFulfillment, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseFulfillment")
	}

	var r0 *autogen.MintControllerFulfillment
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*autogen.MintControllerFulfillment, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *autogen.MintControllerFulfillment); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autogen.MintControllerFulfillment)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMintControllerContract_ParseFulfillment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseFulfillment'
type MockMintControllerContract_ParseFulfillment_Call struct {
	*mock.Call
}

// ParseFulfillment is a helper method to define mock.On call
//   - log types.Log
func (_e *MockMintControllerContract_Expecter) ParseFulfillment(log interface{}) *MockMintControllerContract_ParseFulfillment_Call {
	return &MockMintControllerContract_ParseFulfillment_Call{Call: _e.mock.On("ParseFulfillment", log)}
}

func (_c *MockMintControllerContract_ParseFulfillment_Call) Run(run func(log types.Log)) *MockMintControllerContract_ParseFulfillment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *MockMintControllerContract_ParseFulfillment_Call) Return(_a0 *autogen.MintControllerFulfillment, _a1 error) *MockMintControllerContract_ParseFulfillment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMintControllerContract_ParseFulfillment_Call) RunAndReturn(run func(types.Log) (*autogen.MintControllerFulfillment, error)) *MockMintControllerContract_ParseFulfillment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMintControllerContract creates a new instance of MockMintControllerContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMintControllerContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMintControllerContract {
	mock := &MockMintControllerContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
