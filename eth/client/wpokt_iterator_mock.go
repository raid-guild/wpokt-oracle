// Code generated by mockery v2.33.0. DO NOT EDIT.

package client

import (
	autogen "github.com/dan13ram/wpokt-oracle/eth/autogen"

	mock "github.com/stretchr/testify/mock"
)

// MockWrappedPocketMintedIterator is an autogenerated mock type for the WrappedPocketMintedIterator type
type MockWrappedPocketMintedIterator struct {
	mock.Mock
}

type MockWrappedPocketMintedIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWrappedPocketMintedIterator) EXPECT() *MockWrappedPocketMintedIterator_Expecter {
	return &MockWrappedPocketMintedIterator_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockWrappedPocketMintedIterator) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWrappedPocketMintedIterator_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWrappedPocketMintedIterator_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWrappedPocketMintedIterator_Expecter) Close() *MockWrappedPocketMintedIterator_Close_Call {
	return &MockWrappedPocketMintedIterator_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWrappedPocketMintedIterator_Close_Call) Run(run func()) *MockWrappedPocketMintedIterator_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Close_Call) Return(_a0 error) *MockWrappedPocketMintedIterator_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Close_Call) RunAndReturn(run func() error) *MockWrappedPocketMintedIterator_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields:
func (_m *MockWrappedPocketMintedIterator) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWrappedPocketMintedIterator_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockWrappedPocketMintedIterator_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockWrappedPocketMintedIterator_Expecter) Error() *MockWrappedPocketMintedIterator_Error_Call {
	return &MockWrappedPocketMintedIterator_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockWrappedPocketMintedIterator_Error_Call) Run(run func()) *MockWrappedPocketMintedIterator_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Error_Call) Return(_a0 error) *MockWrappedPocketMintedIterator_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Error_Call) RunAndReturn(run func() error) *MockWrappedPocketMintedIterator_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields:
func (_m *MockWrappedPocketMintedIterator) Event() *autogen.WrappedPocketMinted {
	ret := _m.Called()

	var r0 *autogen.WrappedPocketMinted
	if rf, ok := ret.Get(0).(func() *autogen.WrappedPocketMinted); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autogen.WrappedPocketMinted)
		}
	}

	return r0
}

// MockWrappedPocketMintedIterator_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type MockWrappedPocketMintedIterator_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
func (_e *MockWrappedPocketMintedIterator_Expecter) Event() *MockWrappedPocketMintedIterator_Event_Call {
	return &MockWrappedPocketMintedIterator_Event_Call{Call: _e.mock.On("Event")}
}

func (_c *MockWrappedPocketMintedIterator_Event_Call) Run(run func()) *MockWrappedPocketMintedIterator_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Event_Call) Return(_a0 *autogen.WrappedPocketMinted) *MockWrappedPocketMintedIterator_Event_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Event_Call) RunAndReturn(run func() *autogen.WrappedPocketMinted) *MockWrappedPocketMintedIterator_Event_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields:
func (_m *MockWrappedPocketMintedIterator) Next() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockWrappedPocketMintedIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockWrappedPocketMintedIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockWrappedPocketMintedIterator_Expecter) Next() *MockWrappedPocketMintedIterator_Next_Call {
	return &MockWrappedPocketMintedIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockWrappedPocketMintedIterator_Next_Call) Run(run func()) *MockWrappedPocketMintedIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Next_Call) Return(_a0 bool) *MockWrappedPocketMintedIterator_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketMintedIterator_Next_Call) RunAndReturn(run func() bool) *MockWrappedPocketMintedIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWrappedPocketMintedIterator creates a new instance of MockWrappedPocketMintedIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWrappedPocketMintedIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWrappedPocketMintedIterator {
	mock := &MockWrappedPocketMintedIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWrappedPocketBurnAndBridgeIterator is an autogenerated mock type for the WrappedPocketBurnAndBridgeIterator type
type MockWrappedPocketBurnAndBridgeIterator struct {
	mock.Mock
}

type MockWrappedPocketBurnAndBridgeIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWrappedPocketBurnAndBridgeIterator) EXPECT() *MockWrappedPocketBurnAndBridgeIterator_Expecter {
	return &MockWrappedPocketBurnAndBridgeIterator_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockWrappedPocketBurnAndBridgeIterator) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWrappedPocketBurnAndBridgeIterator_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWrappedPocketBurnAndBridgeIterator_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWrappedPocketBurnAndBridgeIterator_Expecter) Close() *MockWrappedPocketBurnAndBridgeIterator_Close_Call {
	return &MockWrappedPocketBurnAndBridgeIterator_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Close_Call) Run(run func()) *MockWrappedPocketBurnAndBridgeIterator_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Close_Call) Return(_a0 error) *MockWrappedPocketBurnAndBridgeIterator_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Close_Call) RunAndReturn(run func() error) *MockWrappedPocketBurnAndBridgeIterator_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields:
func (_m *MockWrappedPocketBurnAndBridgeIterator) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWrappedPocketBurnAndBridgeIterator_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockWrappedPocketBurnAndBridgeIterator_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockWrappedPocketBurnAndBridgeIterator_Expecter) Error() *MockWrappedPocketBurnAndBridgeIterator_Error_Call {
	return &MockWrappedPocketBurnAndBridgeIterator_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Error_Call) Run(run func()) *MockWrappedPocketBurnAndBridgeIterator_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Error_Call) Return(_a0 error) *MockWrappedPocketBurnAndBridgeIterator_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Error_Call) RunAndReturn(run func() error) *MockWrappedPocketBurnAndBridgeIterator_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Event provides a mock function with given fields:
func (_m *MockWrappedPocketBurnAndBridgeIterator) Event() *autogen.WrappedPocketBurnAndBridge {
	ret := _m.Called()

	var r0 *autogen.WrappedPocketBurnAndBridge
	if rf, ok := ret.Get(0).(func() *autogen.WrappedPocketBurnAndBridge); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autogen.WrappedPocketBurnAndBridge)
		}
	}

	return r0
}

// MockWrappedPocketBurnAndBridgeIterator_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Event'
type MockWrappedPocketBurnAndBridgeIterator_Event_Call struct {
	*mock.Call
}

// Event is a helper method to define mock.On call
func (_e *MockWrappedPocketBurnAndBridgeIterator_Expecter) Event() *MockWrappedPocketBurnAndBridgeIterator_Event_Call {
	return &MockWrappedPocketBurnAndBridgeIterator_Event_Call{Call: _e.mock.On("Event")}
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Event_Call) Run(run func()) *MockWrappedPocketBurnAndBridgeIterator_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Event_Call) Return(_a0 *autogen.WrappedPocketBurnAndBridge) *MockWrappedPocketBurnAndBridgeIterator_Event_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Event_Call) RunAndReturn(run func() *autogen.WrappedPocketBurnAndBridge) *MockWrappedPocketBurnAndBridgeIterator_Event_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields:
func (_m *MockWrappedPocketBurnAndBridgeIterator) Next() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockWrappedPocketBurnAndBridgeIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockWrappedPocketBurnAndBridgeIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockWrappedPocketBurnAndBridgeIterator_Expecter) Next() *MockWrappedPocketBurnAndBridgeIterator_Next_Call {
	return &MockWrappedPocketBurnAndBridgeIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Next_Call) Run(run func()) *MockWrappedPocketBurnAndBridgeIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Next_Call) Return(_a0 bool) *MockWrappedPocketBurnAndBridgeIterator_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWrappedPocketBurnAndBridgeIterator_Next_Call) RunAndReturn(run func() bool) *MockWrappedPocketBurnAndBridgeIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWrappedPocketBurnAndBridgeIterator creates a new instance of MockWrappedPocketBurnAndBridgeIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWrappedPocketBurnAndBridgeIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWrappedPocketBurnAndBridgeIterator {
	mock := &MockWrappedPocketBurnAndBridgeIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
